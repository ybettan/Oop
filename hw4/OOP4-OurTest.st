TestCase subclass: #AllTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!AllTests methodsFor: 'as yet unclassified' stamp: 'NG 6/11/2018 21:20'!setUp		(Smalltalk hasClassNamed: #Breed) ifTrue: [Smalltalk removeClassNamed: #Breed].	(Smalltalk hasClassNamed: #Schnauzer) ifTrue: [Smalltalk removeClassNamed: #Schnauzer].	(Smalltalk hasClassNamed: #Siberian) ifTrue: [Smalltalk removeClassNamed: #Siberian].	(Smalltalk hasClassNamed: #Willet) ifTrue: [Smalltalk removeClassNamed: #Willet].	(Smalltalk hasClassNamed: #Gender) ifTrue: [Smalltalk removeClassNamed: #Gender].	(Smalltalk hasClassNamed: #Female) ifTrue: [Smalltalk removeClassNamed: #Female].	(Smalltalk hasClassNamed: #Male) ifTrue: [Smalltalk removeClassNamed: #Male].	(Smalltalk hasClassNamed: #Creature) ifTrue: [Smalltalk removeClassNamed: #Creature].	(Smalltalk hasClassNamed: #Animal) ifTrue: [Smalltalk removeClassNamed: #Animal].	(Smalltalk hasClassNamed: #Human) ifTrue: [Smalltalk removeClassNamed: #Human].	(Smalltalk hasClassNamed: #Dog) ifTrue: [Smalltalk removeClassNamed: #Dog].	(Smalltalk hasClassNamed: #Cat) ifTrue: [Smalltalk removeClassNamed: #Cat].	(Smalltalk hasClassNamed: #Lion) ifTrue: [Smalltalk removeClassNamed: #Lion].	(Smalltalk hasClassNamed: #Bird) ifTrue: [Smalltalk removeClassNamed: #Bird].	(Smalltalk hasClassNamed: #Cow) ifTrue: [Smalltalk removeClassNamed: #Cow].	(Smalltalk hasClassNamed: #Leo) ifTrue: [Smalltalk removeClassNamed: #Leo].	(Smalltalk hasClassNamed: #Porsha) ifTrue: [Smalltalk removeClassNamed: #Porsha].	(Smalltalk hasClassNamed: #Nick) ifTrue: [Smalltalk removeClassNamed: #Nick].	(Smalltalk hasClassNamed: #Mumu) ifTrue: [Smalltalk removeClassNamed: #Mumu].	(Smalltalk hasClassNamed: #CatDog) ifTrue: [Smalltalk removeClassNamed: #CatDog].	(Smalltalk hasClassNamed: #RealPet) ifTrue: [Smalltalk removeClassNamed: #RealPet].	(Smalltalk hasClassNamed: #Lily) ifTrue: [Smalltalk removeClassNamed: #Lily].	(Smalltalk hasClassNamed: #Tapachick) ifTrue: [Smalltalk removeClassNamed: #Tapachick].		Object subclass: #Breed	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'.		Breed subclass: #Schnauzer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'.		Schnauzer compile:		'play	AssertionFailure signal: ''in Schnauzer, pick up toy and wait'''.		Breed subclass: #Siberian	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'.		Breed subclass: #Willet	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'.		Willet compile:		'hide'.		Object subclass: #Gender	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'.		Gender compile:		'switch'.		Gender subclass: #Female	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'.		Female compile:		'askAttention'.			Gender subclass: #Male	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'.			OOPObject subclass: #Creature				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.							Creature compile:		'breathe'.							Creature subclass: #Animal				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.			Animal compile:		'hide	AssertionFailure signal: ''in Animal, hide!!'''.		Animal compile:		'searchFood	AssertionFailure signal: ''in Animal, look for food'''.										OOPObject subclass: #Human				parentClasses: {OOPParent new parentClass: Creature; inheritanceType: 'public'}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.							Human compile:		'breathe'.									OOPObject subclass: #Dog				parentClasses: {OOPParent new parentClass: Animal; inheritanceType: 'private'}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.			Dog compile:		'bark	AssertionFailure signal: ''in Dog, woof'''.		Dog compile:		'tryHide	Dog new hide'.										OOPObject subclass: #Cat				parentClasses: {OOPParent new parentClass: Animal; inheritanceType: 'public'}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.					Cat compile:		'askAttention'.												OOPObject subclass: #Lion				parentClasses: {OOPParent new parentClass: Animal; inheritanceType: 'public'}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.												OOPObject subclass: #Bird				parentClasses: {OOPParent new parentClass: Animal; inheritanceType: 'private'}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.							Bird compile:		'breathe'.						OOPObject subclass: #Cow				parentClasses: {OOPParent new parentClass: Animal; inheritanceType: 'private'}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.							Cow compile:		'searchFood	AssertionFailure signal: ''in Cow, go for a walk in the meadow'''.						OOPObject subclass: #Leo				parentClasses: {OOPParent new parentClass: Dog; inheritanceType: 'public'.								 OOPParent new parentClass: Male; inheritanceType: 'public'.								 OOPParent new parentClass: Schnauzer; inheritanceType: 'protected'.}				instanceVariableNames: 'age'				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.									Leo compile:		'askAttention	Leo new play'.		Leo compile:		'beCute'.		Leo compile:		'postInitialize	age := 4'.		Leo compile:		'searchFood	AssertionFailure signal: ''in Leo, go sit next to the fridge'''.									Cat subclass: #Porsha				parentClasses: {OOPParent new parentClass: Female; inheritanceType: 'public'.								 OOPParent new parentClass: Siberian; inheritanceType: 'public'.}				instanceVariableNames: 'age'				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.					Porsha compile:		'askAttention	AssertionFailure signal: ''in Porsha, meow'''.		Porsha compile:		'postInitialize	age := 11'.								OOPObject subclass: #Nick				parentClasses: {OOPParent new parentClass: Willet; inheritanceType: 'private'.								 OOPParent new parentClass: Bird; inheritanceType: 'public'.								 OOPParent new parentClass: Male; inheritanceType: 'public'.}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.										OOPObject subclass: #Mumu				parentClasses: {OOPParent new parentClass: Female; inheritanceType: 'public'.								 OOPParent new parentClass: Cow; inheritanceType: 'private'.}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.											OOPObject subclass: #CatDog				parentClasses: {OOPParent new parentClass: Cat; inheritanceType: 'private'.								 OOPParent new parentClass: Dog; inheritanceType: 'public'.}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.					CatDog compile:		'tryHide	Dog new hide'.								OOPObject subclass: #RealPet				parentClasses: {OOPParent new parentClass: Leo; inheritanceType: 'public'.								 OOPParent new parentClass: Porsha; inheritanceType: 'protected'.}				instanceVariableNames: 'sumAges'				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.							RealPet compile:		'postInitialize	|leoInst porshaInst superInsts|		superInsts := self instVarNamed: ''superclassInstances''.	superInsts do: [						:x |						((x class) == Leo)						ifTrue: [leoInst := x].						((x class) == Porsha)						ifTrue: [porshaInst := x]					]. 		sumAges := (leoInst instVarNamed: ''age'') + (porshaInst instVarNamed: ''age'')'.		RealPet compile:		'startGame	Leo new play'.												OOPObject subclass: #Tapachick				parentClasses: {OOPParent new parentClass: Porsha; inheritanceType: 'private'.}				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.																			Human subclass: #Lily				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'OOP4-OurTest'.																													! !!AllTests methodsFor: 'as yet unclassified' stamp: 'NG 6/11/2018 13:11'!testClassifyInheritedM			self assert: ((Leo classifyInheritedMethod: #searchFood) = 'inaccessible').	self assert: ((Leo classifyInheritedMethod: #bark) = 'public').	self assert: ((Dog classifyInheritedMethod: #breathe) = 'private').	self assert: ((Porsha classifyInheritedMethod: #askAttention) = 'ambiguous').	self assert: ((Nick classifyInheritedMethod: #hide) = 'ambiguous').	self assert: ((Leo classifyInheritedMethod: #beCute) = 'undefined').	self assert: ((Cow classifyInheritedMethod: #askAttention) = 'undefined').	self assert: ((Animal classifyInheritedMethod: #beCute) = 'undefined').	self assert: ((Leo classifyInheritedMethod: #play) = 'protected').	self assert: ((Nick classifyInheritedMethod: #breathe) = 'public').	self assert: ((Bird classifyInheritedMethod: #breathe) = 'private').	self assert: ((Mumu classifyInheritedMethod: #searchFood) = 'private').	self assert: ((Mumu classifyInheritedMethod: #switch) = 'public').	self assert: ((CatDog classifyInheritedMethod: #hide) = 'ambiguous').	self assert: ((CatDog classifyInheritedMethod: #beCute) = 'undefined').	self assert: ((CatDog classifyInheritedMethod: #bark) = 'public').	self assert: ((RealPet classifyInheritedMethod: #askAttention) = 'ambiguous').	self assert: ((Tapachick classifyInheritedMethod: #askAttention) = 'ambiguous').			Transcript show: 'testClassifyInheritedM Passed!!' ; cr.! !!AllTests methodsFor: 'as yet unclassified' stamp: 'NG 6/11/2018 14:42'!testDefiningInst	self assert: (((Porsha new) definingInstance: #askAttention) == nil).	self assert: (((RealPet new) definingInstance: #askAttention) == nil).	self assert: (((Leo new) definingInstance: #beCute) == nil).	self assert: (((Leo new) definingInstance: #unknown) == nil).	self assert: (((Leo new) definingInstance: #searchFood) == nil).	self assert: (((Leo new) definingInstance: #bark) class == Dog ).	self assert: (((Leo new) definingInstance: #play) class == Schnauzer ).	"should it be checked: ?"	self assert: (((Leo new) definingInstance: #switch) class == Male ).	self assert: (((Bird new) definingInstance: #breathe) class == Creature ).	self assert: (((Mumu new) definingInstance: #searchFood) class == Cow ).	self assert: (((Lily new) definingInstance: #breathe) class == Human ).		Transcript show: 'testDefiningInst Passed!!' ; cr.! !!AllTests methodsFor: 'as yet unclassified' stamp: 'NG 6/11/2018 20:16'!testInitializeSupers		|allSupers allSuperInst someInst i|	allSupers := Leo superclasses.	someInst := Leo new.	allSuperInst := someInst instVarNamed: 'superclassInstances'.	i := 1.	allSuperInst do: [						:x | |temp|						self assert: ((x class) == ((allSupers at: i) parentClass)).						temp := i+1.						i := temp					].	allSupers := Porsha superclasses.	someInst := Porsha new.	allSuperInst := someInst instVarNamed: 'superclassInstances'.	i := 1.	allSuperInst do: [						:x | |temp|						self assert: ((x class) == ((allSupers at: i) parentClass)).						temp := i+1.						i := temp					].	allSupers := Animal superclasses.	someInst := Animal new.	allSuperInst := someInst instVarNamed: 'superclassInstances'.	i := 1.	allSuperInst do: [						:x | |temp|						self assert: ((x class) == ((allSupers at: i) parentClass)).						temp := i+1.						i := temp					].											Transcript show: 'testInitializeSupers Passed!!' ; cr.										! !!AllTests methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:43'!testMultInheritsFrom	self assert: ((Animal multInheritsFrom: Creature) == true).		self assert: ((Human multInheritsFrom: Creature) == true).		self assert: ((Dog multInheritsFrom: Creature) == true).							self assert: ((Cow multInheritsFrom: Animal) == true).		self assert: ((Cat multInheritsFrom: Cat) == false).			self assert: ((Leo multInheritsFrom: Animal) == true).	self assert: ((Leo multInheritsFrom: Breed) == true).	self assert: ((Leo multInheritsFrom: Gender) == true).		self assert: ((Leo multInheritsFrom: Dog) == true).		self assert: ((Leo multInheritsFrom: Siberian) == false).	self assert: ((Cat multInheritsFrom: Human) == false).	self assert: ((Bird multInheritsFrom: Female) == false).		Transcript show: 'testMultInheritsFrom Passed!!' ; cr.! !!AllTests methodsFor: 'as yet unclassified' stamp: 'NG 6/11/2018 20:17'!testPostInitialize	self assert: (((Leo new) instVarNamed: 'age') == 4).	self assert: (((Porsha new) instVarNamed: 'age') == 11).	self assert: (((RealPet new) instVarNamed: 'sumAges') == 15).		Transcript show: 'testPostInitialize Passed!!' ; cr.	! !!AllTests methodsFor: 'as yet unclassified' stamp: 'NG 6/11/2018 19:33'!testSendingMethods		| text|	text := ''.	[(Dog new) bark] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'in Dog, woof').			[(Leo new) bark] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'in Dog, woof').			[(Leo new) searchFood] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'in Leo, go sit next to the fridge').						"the method is protected in Leo, but current class (AllTests) doesn't inherit from Leo"				[(Leo new) play] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'AllTests cannot send play to Leo because: protected').		"the method is private in Mumu, but current class (AllTests) is not Mumu"		[(Mumu new) searchFood] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'AllTests cannot send searchFood to Mumu because: private').			"the method startGame calls the method play on an instance of Leo. play is protected in Leo, and RealPet inherits from leo therefore can invoke it."		[(RealPet new) startGame] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'in Schnauzer, pick up toy and wait').				"the method tryHide calls the method hide on an instance of Dog. hide is private in Dog, but Dog is the class trying to invoke it, therefore should success"		[(Dog new) tryHide] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'in Animal, hide!!').				"the method tryHide calls the method hide on an instance of Dog. hide is private in Dog, therefore CatDog can't access it."		[(CatDog new) tryHide] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'CatDog cannot send hide to Dog because: private').			"the method askAttention calls the method play on an instance of Leo. play is protected in Leo, but leo is the class trying to invoke it, therefore should success"		[(Leo new) askAttention] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'in Schnauzer, pick up toy and wait').				[(Leo new) breathe] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'AllTests cannot send breathe to Leo because: inaccessible').				[(RealPet new) askAttention] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'AllTests cannot send askAttention to RealPet because: ambiguous').									[(Porsha new) askAttention] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'in Porsha, meow').					[(RealPet new) unknown] on: AssertionFailure do: [:err| text := err messageText ].	self assert: (text = 'AllTests cannot send unknown to RealPet because: undefined').			Transcript show: 'testSendingMethods Passed!!' ; cr.! !!AllTests methodsFor: 'as yet unclassified' stamp: 'NG 6/11/2018 11:53'!testSuperclasses	|superArr realClassSet setToCompare firstInArr|		superArr := (Leo superclasses).	realClassSet := Set new.	superArr do: [						:s | 						realClassSet add: (s parentClass)				  ].				setToCompare := (Set new)  add: Dog; add: Male; add: Schnauzer; yourself. 	self assert: (realClassSet = setToCompare).		superArr := (Animal superclasses).	realClassSet := Set new.	superArr do: [						:s | 						realClassSet add: (s parentClass)				  ].				setToCompare := (Set new)  add: Creature; yourself. 	self assert: (realClassSet = setToCompare).		superArr := (Porsha superclasses).	firstInArr := superArr at: 1.	self assert: ((firstInArr parentClass) == Cat).	realClassSet := Set new.	superArr do: [						:s | 						realClassSet add: (s parentClass)				  ].				setToCompare := (Set new)  add: Cat; add: Female; add: Siberian; yourself. 	self assert: (realClassSet = setToCompare).		Transcript show: 'testsuperclasses Passed!!' ; cr.! !OOPObject subclass: #Animal	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Animal methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!hide	AssertionFailure signal: 'in Animal, hide!!'! !!Animal methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!searchFood	AssertionFailure signal: 'in Animal, look for food'! !OOPObject subclass: #Bird	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Bird methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!breathe! !Object subclass: #Breed	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!OOPObject subclass: #Cat	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Cat methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!askAttention! !OOPObject subclass: #CatDog	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!CatDog methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!tryHide	Dog new hide! !OOPObject subclass: #Cow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Cow methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!searchFood	AssertionFailure signal: 'in Cow, go for a walk in the meadow'! !OOPObject subclass: #Creature	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Creature methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!breathe! !OOPObject subclass: #Dog	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Dog methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!bark	AssertionFailure signal: 'in Dog, woof'! !!Dog methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!tryHide	Dog new hide! !Object subclass: #Gender	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Gender methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!switch! !Gender subclass: #Female	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Female methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!askAttention! !OOPObject subclass: #Human	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Human methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!breathe! !OOPObject subclass: #Leo	instanceVariableNames: 'age'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Leo methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!askAttention	Leo new play! !!Leo methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!beCute! !!Leo methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!postInitialize	age := 4! !!Leo methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!searchFood	AssertionFailure signal: 'in Leo, go sit next to the fridge'! !OOPObject subclass: #Lily	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!OOPObject subclass: #Lion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!Gender subclass: #Male	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!OOPObject subclass: #Mumu	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!OOPObject subclass: #Nick	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!OOPObject subclass: #Porsha	instanceVariableNames: 'age'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Porsha methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!askAttention	AssertionFailure signal: 'in Porsha, meow'! !!Porsha methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!postInitialize	age := 11! !OOPObject subclass: #RealPet	instanceVariableNames: 'sumAges'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!RealPet methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!postInitialize	|leoInst porshaInst superInsts|		superInsts := self instVarNamed: 'superclassInstances'.	superInsts do: [						:x |						((x class) == Leo)						ifTrue: [leoInst := x].						((x class) == Porsha)						ifTrue: [porshaInst := x]					]. 		sumAges := (leoInst instVarNamed: 'age') + (porshaInst instVarNamed: 'age')! !!RealPet methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!startGame	Leo new play! !Breed subclass: #Schnauzer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Schnauzer methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!play	AssertionFailure signal: 'in Schnauzer, pick up toy and wait'! !Breed subclass: #Siberian	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!OOPObject subclass: #Tapachick	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!Breed subclass: #Willet	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4-OurTest'!!Willet methodsFor: 'as yet unclassified' stamp: 'NG 6/12/2018 07:52'!hide! !