Object subclass: #OOPObject	instanceVariableNames: 'superclassInstances'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!OOPObject methodsFor: 'setters' stamp: 'sdf 6/6/2018 19:44'!initializeSupers	| superclassInstanceArrSize |		superclassInstanceArrSize := self class superclasses size.	superclassInstances := Array new: superclassInstanceArrSize.	(1 to: superclassInstanceArrSize) do: [ :i | superclassInstances at: i put: ( (self class superclasses at: i) aClass new)].! !!OOPObject methodsFor: 'initialize-release' stamp: 'sdf 6/6/2018 19:55'!initialize	^self initializeSupers postInitialize.! !!OOPObject methodsFor: 'initialize-release' stamp: 'sdf 6/6/2018 19:55'!postInitialize	^self.! !!OOPObject methodsFor: 'subclass creation' stamp: 'sdf 6/6/2018 19:24'!subclass: aSubclassName instanceVariableNames: instVarNamesclassVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategoryName 	^ self		subclass: aSubclassName		parentClasses: Array new		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: poolDictionaries		category: aCategoryName.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OOPObject class	instanceVariableNames: 'superclasses'!!OOPObject class methodsFor: 'accessing class hierarchy' stamp: 'sdf 6/6/2018 19:34'!multInheritsFrom: aClass	superclasses do: [ :sc | (sc parentClass = aClass) ifTrue: [^true].].	^false.! !!OOPObject class methodsFor: 'getters' stamp: 'sdf 6/6/2018 19:36'!superclasses	^superclasses.! !!OOPObject class methodsFor: 'subclass creation' stamp: 'sdf 6/6/2018 19:15'!subclass: aSubclassName parentClasses: anArray instanceVariableNames: instVarNamesclassVariableNames: classVarNames poolDictionaries: poolDictionaries category: aCategoryName 	| res parentClassesOrderedCollection parentClassesArr |		"create the normal squeak inheritance object - cannot call the method itself because it is overriden"	res := (ClassBuilder new)				superclass: OOPObject				subclass: aSubclassName				instanceVariableNames: instVarNames				classVariableNames: classVarNames				poolDictionaries: poolDictionaries				category: aCategoryName.				"if self isn't OOPObject we will insert it to the first index of the superclasses array"	parentClassesOrderedCollection := OrderedCollection new.	(self == OOPObject) ifFalse: [parentClassesOrderedCollection addFirst: (OOPParent new parentClass: self ; inheritanceType: 'public')].	anArray do: [ :singleParentClass | parentClassesOrderedCollection addFirst: singleParentClass].	parentClassesArr := Array new: parentClassesOrderedCollection size.	(1 to: parentClassesArr size) do: [ :i | parentClassesArr at: i put: (parentClassesOrderedCollection at: i)].	"insert parentClassesArr to res.superclasses field"	res instVarNamed: 'superclasses' put: parentClassesArr.		"return the result"	^res.! !Object subclass: #OOPParent	instanceVariableNames: 'parentClass inheritanceType'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP4'!!OOPParent methodsFor: 'getters' stamp: 'd 5/30/2018 17:46'!inheritanceType		^ inheritanceType.! !!OOPParent methodsFor: 'getters' stamp: 'd 5/30/2018 17:48'!parentClass		^ parentClass.! !!OOPParent methodsFor: 'setters' stamp: 'd 5/30/2018 17:53'!inheritanceType: aString		inheritanceType := aString.! !!OOPParent methodsFor: 'setters' stamp: 'sdf 5/30/2018 19:25'!parentClass: aClass		parentClass := aClass.! !!OOPParent methodsFor: 'initialize-release' stamp: 'd 5/30/2018 17:47'!initialize		parentClass := Object.		inheritanceType := 'public'.! !