'From Squeak5.1 of 23 August 2016 [latest update: #16548] on 15 June 2018 at 3:42:09 pm'!TestCase subclass: #OOPObjectTest	instanceVariableNames: 'aClass bClass cClass dClass eClass fClass gClass hClass iClass jClass'	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Extensions'!!OOPObjectTest methodsFor: 'initialize-release' stamp: 'yb 6/15/2018 15:34'!initialize			"create the inheritance tree"		aClass := OOPObject subclass: #A 							parentClasses: (Array new: 0) 							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingA'.		bClass := OOPObject subclass: #B							parentClasses: (Array new: 0) 							instanceVariableNames: 'bi1 bi2' 							classVariableNames: 'Bc1' 							poolDictionaries: '' 							category: 'testingB'.		cClass := aClass subclass: #C 							parentClasses: (Array new: 0) 							instanceVariableNames: 'ci1 ci2 ci3 ci4' 							classVariableNames: 'Cc1 Cc2 Cc3' 							poolDictionaries: '' 							category: 'testingC'.		dClass := OOPObject subclass: #D							parentClasses: (Array with: (OOPParent new parentClass: aClass ; inheritanceType: 'protected')												   with: (OOPParent new parentClass: cClass ; inheritanceType: 'private') )							instanceVariableNames: '' 							classVariableNames: 'Dc1' 							poolDictionaries: '' 							category: 'testingD'.		eClass := aClass subclass: #E 							parentClasses: (Array with: (OOPParent new parentClass: cClass ; inheritanceType: 'private')												   with: (OOPParent new parentClass: dClass ; inheritanceType: 'protected') ) 							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingE'.		fClass := eClass subclass: #F							parentClasses: (Array new: 0) 							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingF'.		gClass := OOPObject subclass: #G							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingG'.		hClass := gClass subclass: #H							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingH'.		iClass := aClass subclass: #I 							parentClasses: (Array with: (OOPParent new parentClass: String ; inheritanceType: 'private') ) 							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingI'.		jClass := iClass subclass: #J							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingJ'.									"add methods"		aClass	compile: 'a		^#A::a' ; 				compile: 'aWithParam: aSymbol		^#A::aWithParam::, aSymbol' .		cClass	compile: 'c		^#C::c' ; 				compile: 'c2	^#C::c2' ; 				compile: 'ambig	^#C::ambig'.		dClass	compile: 'a		^#D::a' ; 			    	compile: 'c		^#D::c' ; 				compile: 'd		^#D::d' ;			   	compile: 'ambig	^#D::ambig'.		eClass	compile: 'e		^#E::e' ; 				compile: 'c2	^#E::c2'.		gClass	compile: 'g		^#G::g' .		iClass	compile: 'i		^#I::i' ;				compile: 'asAscii	^#I::asAscii';				compile: 'iWithParam: aSymbol		^#I::iWithParam::, aSymbol' .		jClass	compile: 'j		^#J::j'.															! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/14/2018 09:24'!testClassifyInheritedMethod	| oot |			oot := OOPObjectTest new.				self assert: ( (aClass classifyInheritedMethod: #a) = 'undefined').				self assert: ( (cClass classifyInheritedMethod: #a) = 'public').				self assert: ( (dClass classifyInheritedMethod: #a) = 'ambiguous').		self assert: ( (dClass classifyInheritedMethod: #c) = 'private').		self assert: ( (dClass classifyInheritedMethod: #c2) = 'private').		self assert: ( (dClass classifyInheritedMethod: #d) = 'undefined').				self assert: ( (eClass classifyInheritedMethod: #ambig) = 'ambiguous').		self assert: ( (eClass classifyInheritedMethod: #a) = 'ambiguous').		self assert: ( (eClass classifyInheritedMethod: #c) = 'ambiguous').		self assert: ( (eClass classifyInheritedMethod: #c2) = 'ambiguous').		self assert: ( (eClass classifyInheritedMethod: #undef) = 'undefined').		self assert: ( (eClass classifyInheritedMethod: #d) = 'protected').		self assert: ( (eClass classifyInheritedMethod: #e) = 'undefined').				self assert: ( (fClass classifyInheritedMethod: #a) = 'ambiguous').		self assert: ( (fClass classifyInheritedMethod: #c) = 'ambiguous').		self assert: ( (fClass classifyInheritedMethod: #c2) = 'ambiguous'). "according to omer E cannot override an ambiguous methos"		self assert: ( (fClass classifyInheritedMethod: #d) = 'protected').		self assert: ( (fClass classifyInheritedMethod: #undef) = 'undefined').		self assert: ( (fClass classifyInheritedMethod: #ambig) = 'ambiguous').		self assert: ( (fClass classifyInheritedMethod: #e) = 'public').				self assert: ( (hClass classifyInheritedMethod: #undef) = 'undefined').		self assert: ( (hClass classifyInheritedMethod: #g) = 'public').				self assert: ( (iClass classifyInheritedMethod: #i) = 'undefined').		self assert: ( (iClass classifyInheritedMethod: #a) = 'public').		self assert: ( (iClass classifyInheritedMethod: #asAscii) = 'private').		self assert: ( (iClass classifyInheritedMethod: #+) = 'private').		self assert: ( (iClass classifyInheritedMethod: #asOop) = 'private'). "according to Omer OOPObject shoul'd search for method only and the new inheritance"				self assert: ( (jClass classifyInheritedMethod: #a) = 'public').		self assert: ( (jClass classifyInheritedMethod: #i) = 'public').		self assert: ( (jClass classifyInheritedMethod: #j) = 'undefined').		self assert: ( (jClass classifyInheritedMethod: #asAscii) = 'public').		self assert: ( (jClass classifyInheritedMethod: #+) = 'inaccessible').		self assert: ( (jClass classifyInheritedMethod: #asOop) = 'inaccessible').						! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/14/2018 09:24'!testDefiningInstance	| oot aInst bInst cInst dInst eInst fInst gInst hInst iInst jInst |			oot := OOPObjectTest new.				aInst := (oot instVarNamed: 'aClass') new.		bInst := (oot instVarNamed: 'bClass') new.		cInst := (oot instVarNamed: 'cClass') new.		dInst := (oot instVarNamed: 'dClass') new.		eInst := (oot instVarNamed: 'eClass') new.		fInst := (oot instVarNamed: 'fClass') new.		gInst := (oot instVarNamed: 'gClass') new.		hInst := (oot instVarNamed: 'hClass') new.		iInst := (oot instVarNamed: 'iClass') new.		jInst := (oot instVarNamed: 'jClass') new.		self assert: ( (aInst definingInstance: #a) = nil).				self assert: ( (cInst definingInstance: #a) = ( (cInst instVarNamed: 'superclassInstances') at: 1) ).				self assert: ( (dInst definingInstance: #a) = nil ).		self assert: ( (dInst definingInstance: #c) = ( (dInst instVarNamed: 'superclassInstances') at: 2) ).		self assert: ( (dInst definingInstance: #c2) = ( (dInst instVarNamed: 'superclassInstances') at: 2) ).		self assert: ( (dInst definingInstance: #ambig) = ( (dInst instVarNamed: 'superclassInstances') at: 2) ).		self assert: ( (dInst definingInstance: #d) = nil ).				self assert: ( (eInst definingInstance: #ambig) = nil ).		self assert: ( (eInst definingInstance: #a) = nil ).		self assert: ( (eInst definingInstance: #c) = nil ).		self assert: ( (eInst definingInstance: #c2) = nil ).		self assert: ( (eInst definingInstance: #undef) = nil ).		self assert: ( (eInst definingInstance: #d) = ( (eInst instVarNamed: 'superclassInstances') at: 3) ).		self assert: ( (eInst definingInstance: #e) = nil ).				self assert: ( (fInst definingInstance: #a) = nil ).		self assert: ( (fInst definingInstance: #c) = nil ).		self assert: ( (fInst definingInstance: #c2) = nil ).		self assert: ( (fInst definingInstance: #d) = ((( (fInst instVarNamed: 'superclassInstances') at: 1) instVarNamed: 'superclassInstances' ) at: 3 )).		self assert: ( (fInst definingInstance: #undef) = nil ).		self assert: ( (fInst definingInstance: #ambig) = nil ).		self assert: ( (fInst definingInstance: #e) = ( (fInst instVarNamed: 'superclassInstances') at: 1) ).				self assert: ( (hInst definingInstance: #undef) = nil ).		self assert: ( (hInst definingInstance: #g) = ( (hInst instVarNamed: 'superclassInstances') at: 1) ).				self assert: ( (iInst definingInstance: #i) = nil ).		self assert: ( (iInst definingInstance: #a) = ( (iInst instVarNamed: 'superclassInstances') at: 1) ).		self assert: ( (iInst definingInstance: #asAscii) = ( (iInst instVarNamed: 'superclassInstances') at: 2) ).		self assert: ( (iInst definingInstance: #+) = ( (iInst instVarNamed: 'superclassInstances') at: 2) ).		self assert: ( (iInst definingInstance: #asOop) = ( (iInst instVarNamed: 'superclassInstances') at: 2) ).				self assert: ( (jInst definingInstance: #a) = ( ( ( (jInst instVarNamed: 'superclassInstances') at: 1) instVarNamed: 'superclassInstances') at: 1)).		self assert: ( (jInst definingInstance: #i) = ( (jInst instVarNamed: 'superclassInstances') at: 1) ).		self assert: ( (jInst definingInstance: #j) = nil ).		self assert: ( (jInst definingInstance: #asAscii) = ( (jInst instVarNamed: 'superclassInstances') at: 1) ).		self assert: ( (jInst definingInstance: #+) = nil ).		self assert: ( (jInst definingInstance: #asOop) = nil ).			! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/15/2018 15:41'!testDoesNotUnderstand	| oot aInst bInst cInst dInst eInst fInst gInst hInst iInst jInst |			oot := OOPObjectTest new.				aInst := (oot instVarNamed: 'aClass') new.		bInst := (oot instVarNamed: 'bClass') new.		cInst := (oot instVarNamed: 'cClass') new.		dInst := (oot instVarNamed: 'dClass') new.		eInst := (oot instVarNamed: 'eClass') new.		fInst := (oot instVarNamed: 'fClass') new.		gInst := (oot instVarNamed: 'gClass') new.		hInst := (oot instVarNamed: 'hClass') new.		iInst := (oot instVarNamed: 'iClass') new.		jInst := (oot instVarNamed: 'jClass') new.				self assert: (aInst a = #A::a).		self assert: ( (aInst aWithParam: #ap) = 'A::aWithParam::ap').		"don't exist - undefined"		[aInst undef] on: AssertionFailure do: [ :af | self assert: (af messageText = 'OOPObjectTest cannot send undef to A because: undefined')]. 									self assert: (cInst a = #A::a).		self assert: (cInst c = #C::c).		self assert: (cInst c2 = #C::c2).		self assert: (cInst ambig = #C::ambig).		self assert: ( (cInst aWithParam: #ap) = 'A::aWithParam::ap').				self assert: (dInst a = #D::a).		self assert: (dInst c = #D::c).		self assert: (dInst d = #D::d).		"don't have permission - private"		[dInst c2.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send c2 to D because: private')].							self assert: (dInst ambig = #D::ambig).		"don't exist - ambiguous"				[dInst aWithParam: #ap.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send aWithParam: to D because: ambiguous')]. 										self assert: (eInst c2 = #E::c2).										self assert: (eInst e = #E::e).		"don't exist - ambiguous"		[eInst a.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send a to E because: ambiguous')].											"don't exist - ambiguous"		[eInst ambig.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send ambig to E because: ambiguous')].		"don't exist - ambiguous"										[eInst c.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send c to E because: ambiguous')].		"don't exist - ambiguous"											[eInst c2.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send c2 to E because: ambiguous')].											"don't have permission - protected"				[eInst d.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send d to E because: protected')].		"don't exist - ambiguous"				[eInst aWithParam: #ap.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send aWithParam: to E because: ambiguous')]. 																					self assert: (fInst e = #E::e).		"don't exist - ambiguous"			[fInst c2.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send c2 to F because: ambiguous')].		"don't exist - ambiguous"				[fInst aWithParam: #ap.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send aWithParam: to F because: ambiguous')]. 																				self assert: (hInst g = #G::g).		"don't exist - undefined"		[hInst undef.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send undef to H because: undefined')].				self assert: (iInst i = #I::i).		self assert: ( (iInst iWithParam: #x) = 'I::iWithParam::x').		self assert: (iInst asAscii = #I::asAscii).		self assert: (iInst a = #A::a).		"don't have permission - private"		[iInst + 2.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send + to I because: private')]. 																				self assert: (jInst j = #J::j).		self assert: (jInst i = #I::i).		self assert: ( (jInst iWithParam: #y) = 'I::iWithParam::y').		self assert: (jInst asAscii = #I::asAscii).		self assert: (jInst a = #A::a).		"don't have permission - inaccessible"		[jInst + 2.] on: AssertionFailure do: [:af | self assert: (af messageText = 'OOPObjectTest cannot send + to J because: inaccessible')]. 													! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/13/2018 09:19'!testInitializeSupers	| oot aInst bInst cInst dInst eInst fInst gInst hInst iInst jInst|			oot := OOPObjectTest new.				aInst := (oot instVarNamed: 'aClass') new.		bInst := (oot instVarNamed: 'bClass') new.		cInst := (oot instVarNamed: 'cClass') new.		dInst := (oot instVarNamed: 'dClass') new.		eInst := (oot instVarNamed: 'eClass') new.		fInst := (oot instVarNamed: 'fClass') new.		gInst := (oot instVarNamed: 'gClass') new.		hInst := (oot instVarNamed: 'hClass') new.		iInst := (oot instVarNamed: 'iClass') new.		jInst := (oot instVarNamed: 'jClass') new.				self assert: ( ( aInst instVarNamed: 'superclassInstances')  size = 0).		self assert: ( ( bInst instVarNamed: 'superclassInstances')  size = 0).		self assert: ( ( cInst instVarNamed: 'superclassInstances')  size = 1).		self assert: ( ( dInst instVarNamed: 'superclassInstances')  size = 2).		self assert: ( ( eInst instVarNamed: 'superclassInstances')  size = 3).		self assert: ( ( fInst instVarNamed: 'superclassInstances')  size = 1).		self assert: ( ( gInst instVarNamed: 'superclassInstances')  size = 0).		self assert: ( ( hInst instVarNamed: 'superclassInstances')  size = 1).		self assert: ( ( iInst instVarNamed: 'superclassInstances')  size = 2).		self assert: ( ( jInst instVarNamed: 'superclassInstances')  size = 1).				self assert: ( ( ( cInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: aClass ). 				self assert: ( ( ( dInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: aClass ). 		self assert: ( ( ( dInst instVarNamed: 'superclassInstances') at: 2) isMemberOf: cClass ).				self assert: ( ( ( eInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: aClass ).		self assert: ( ( ( eInst instVarNamed: 'superclassInstances') at: 2) isMemberOf: cClass ).		self assert: ( ( ( eInst instVarNamed: 'superclassInstances') at: 3) isMemberOf: dClass ).				self assert: ( ( ( fInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: eClass ).				self assert: ( ( ( hInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: gClass ).				self assert: ( ( ( iInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: aClass ).		self assert: ( ( ( iInst instVarNamed: 'superclassInstances') at: 2) isMemberOf: ByteString ).				self assert: ( ( ( jInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: iClass ).			! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/12/2018 19:36'!testMultInhetitsFrom	| oot |			oot := OOPObjectTest new.				self assert: ((aClass multInheritsFrom: aClass) = false).				self assert: (cClass multInheritsFrom: aClass).		self assert: ((cClass multInheritsFrom: bClass) = false).		self assert: ((cClass multInheritsFrom: dClass) = false).		self assert: ((cClass multInheritsFrom: eClass) = false).				self assert: (dClass multInheritsFrom: aClass).		self assert: (dClass multInheritsFrom: cClass).		self assert: ((dClass multInheritsFrom: bClass) = false).		self assert: ((dClass multInheritsFrom: eClass) = false).		self assert: ((dClass multInheritsFrom: fClass) = false).				self assert: (eClass multInheritsFrom: aClass).		self assert: (eClass multInheritsFrom: cClass).		self assert: (eClass multInheritsFrom: dClass).		self assert: ((eClass multInheritsFrom: bClass) = false).		self assert: ((eClass multInheritsFrom: fClass) = false).				self assert: ((gClass multInheritsFrom: gClass) = false).		self assert: ((gClass multInheritsFrom: hClass) = false).				self assert: (hClass multInheritsFrom: gClass).		self assert: ((hClass multInheritsFrom: hClass) = false).				self assert: (iClass multInheritsFrom: aClass).		self assert: (iClass multInheritsFrom: String).		self assert: ((iClass multInheritsFrom: cClass) = false).				self assert: (jClass multInheritsFrom: iClass).		self assert: (jClass multInheritsFrom: aClass).		self assert: (jClass multInheritsFrom: String).		self assert: ((jClass multInheritsFrom: cClass) = false).			! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/14/2018 09:08'!testSubclass_1	| oot |			oot := OOPObjectTest new.				self assert: (aClass superclasses size = 0).		self assert: (bClass superclasses size = 0).		self assert: (cClass superclasses size = 1).		self assert: (dClass superclasses size = 2).		self assert: (eClass superclasses size = 3).		self assert: (fClass superclasses size = 1).		self assert: (iClass superclasses size = 2).				self assert: ( (cClass superclasses at: 1) parentClass = aClass) ; assert: ( (cClass superclasses at: 1) inheritanceType = 'public').				self assert: ( (dClass superclasses at: 1) parentClass = aClass) ; assert: ( (dClass superclasses at: 1) inheritanceType = 'protected').		self assert: ( (dClass superclasses at: 2) parentClass = cClass) ; assert: ( (dClass superclasses at: 2) inheritanceType = 'private').				self assert: ( (eClass superclasses at: 1) parentClass = aClass) ; assert: ( (eClass superclasses at: 1) inheritanceType = 'public').		self assert: ( (eClass superclasses at: 2) parentClass = cClass) ; assert: ( (eClass superclasses at: 2) inheritanceType = 'private').		self assert: ( (eClass superclasses at: 3) parentClass = dClass) ; assert: ( (eClass superclasses at: 3) inheritanceType = 'protected').				self assert: ( (fClass superclasses at: 1) parentClass = eClass) ; assert: ( (cClass superclasses at: 1) inheritanceType = 'public').				self assert: ( (iClass superclasses at: 1) parentClass = aClass) ; assert: ( (iClass superclasses at: 1) inheritanceType = 'public').		self assert: ( (iClass superclasses at: 2) parentClass = String) ; assert: ( (iClass superclasses at: 2) inheritanceType = 'private').						! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/12/2018 19:02'!testSubclass_2	| oot |			oot := OOPObjectTest new.				self assert: (gClass superclasses size = 0).		self assert: (hClass superclasses size = 1).		self assert: (jClass superclasses size = 1).				self assert: ( (hClass superclasses at: 1) parentClass = gClass) ; assert: ( (hClass superclasses at: 1) inheritanceType = 'public').		self assert: ( (jClass superclasses at: 1) parentClass = iClass) ; assert: ( (jClass superclasses at: 1) inheritanceType = 'public').		! !