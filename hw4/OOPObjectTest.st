'From Squeak5.1 of 23 August 2016 [latest update: #16548] on 12 June 2018 at 6:14:21 pm'!TestCase subclass: #OOPObjectTest	instanceVariableNames: 'aClass bClass cClass dClass eClass fClass gClass hClass'	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Extensions'!!OOPObjectTest methodsFor: 'initialize-release' stamp: 'yb 6/12/2018 17:24'!initialize			"create the inheritance tree"		aClass := OOPObject subclass: #A 							parentClasses: (Array new: 0) 							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingA'.		bClass := OOPObject subclass: #B							parentClasses: (Array new: 0) 							instanceVariableNames: 'bi1 bi2' 							classVariableNames: 'Bc1' 							poolDictionaries: '' 							category: 'testingB'.		cClass := aClass subclass: #C 							parentClasses: (Array new: 0) 							instanceVariableNames: 'ci1 ci2 ci3 ci4' 							classVariableNames: 'Cc1 Cc2 Cc3' 							poolDictionaries: '' 							category: 'testingC'.		dClass := cClass subclass: #D							parentClasses: (Array with: (OOPParent new parentClass: aClass ; inheritanceType: 'private') )							instanceVariableNames: '' 							classVariableNames: 'Dc1' 							poolDictionaries: '' 							category: 'testingD'.		eClass := aClass subclass: #E 							parentClasses: (Array with: (OOPParent new parentClass: cClass ; inheritanceType: 'private')												   with: (OOPParent new parentClass: dClass ; inheritanceType: 'private') 														) 							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingE'.		fClass := eClass subclass: #F							parentClasses: (Array new: 0) 							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingF'.		gClass := OOPObject subclass: #G							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingG'.		hClass := gClass subclass: #H							instanceVariableNames: '' 							classVariableNames: '' 							poolDictionaries: '' 							category: 'testingG'.! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/12/2018 18:14'!testInitializeSupers	| oot aInst bInst cInst dInst eInst fInst gInst hInst|			oot := OOPObjectTest new.				aInst := (oot instVarNamed: 'aClass') new.		bInst := (oot instVarNamed: 'bClass') new.		cInst := (oot instVarNamed: 'cClass') new.		dInst := (oot instVarNamed: 'dClass') new.		eInst := (oot instVarNamed: 'eClass') new.		fInst := (oot instVarNamed: 'fClass') new.		gInst := (oot instVarNamed: 'gClass') new.		hInst := (oot instVarNamed: 'hClass') new.				self assert: ( ( aInst instVarNamed: 'superclassInstances')  size = 0).		self assert: ( ( bInst instVarNamed: 'superclassInstances')  size = 0).		self assert: ( ( cInst instVarNamed: 'superclassInstances')  size = 1).		self assert: ( ( dInst instVarNamed: 'superclassInstances')  size = 2).		self assert: ( ( eInst instVarNamed: 'superclassInstances')  size = 3).		self assert: ( ( fInst instVarNamed: 'superclassInstances')  size = 1).		self assert: ( ( gInst instVarNamed: 'superclassInstances')  size = 0).		self assert: ( ( hInst instVarNamed: 'superclassInstances')  size = 1).				self assert: ( ( ( cInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: aClass ). 				self assert: ( ( ( dInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: cClass ). 		self assert: ( ( ( dInst instVarNamed: 'superclassInstances') at: 2) isMemberOf: aClass ).				self assert: ( ( ( eInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: aClass ).		self assert: ( ( ( eInst instVarNamed: 'superclassInstances') at: 2) isMemberOf: cClass ).		self assert: ( ( ( eInst instVarNamed: 'superclassInstances') at: 3) isMemberOf: dClass ).				self assert: ( ( ( fInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: eClass ).				self assert: ( ( ( hInst instVarNamed: 'superclassInstances') at: 1) isMemberOf: gClass ).			! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/12/2018 17:35'!testMultInhetitsFrom	| oot |			oot := OOPObjectTest new.				self assert: ((aClass multInheritsFrom: aClass) = false).				self assert: (cClass multInheritsFrom: aClass).		self assert: ((cClass multInheritsFrom: bClass) = false).		self assert: ((cClass multInheritsFrom: dClass) = false).		self assert: ((cClass multInheritsFrom: eClass) = false).				self assert: (dClass multInheritsFrom: aClass).		self assert: (dClass multInheritsFrom: cClass).		self assert: ((dClass multInheritsFrom: bClass) = false).		self assert: ((dClass multInheritsFrom: eClass) = false).		self assert: ((dClass multInheritsFrom: fClass) = false).				self assert: (eClass multInheritsFrom: aClass).		self assert: (eClass multInheritsFrom: cClass).		self assert: (eClass multInheritsFrom: dClass).		self assert: ((eClass multInheritsFrom: bClass) = false).		self assert: ((eClass multInheritsFrom: fClass) = false).				self assert: ((gClass multInheritsFrom: gClass) = false).		self assert: ((gClass multInheritsFrom: hClass) = false).				self assert: (hClass multInheritsFrom: gClass).		self assert: ((hClass multInheritsFrom: hClass) = false).			! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/12/2018 17:26'!testSubclass_1	| oot |			oot := OOPObjectTest new.				self assert: (aClass superclasses size = 0).		self assert: (bClass superclasses size = 0).		self assert: (cClass superclasses size = 1).		self assert: (dClass superclasses size = 2).		self assert: (eClass superclasses size = 3).		self assert: (fClass superclasses size = 1).				self assert: ( (cClass superclasses at: 1) parentClass = aClass) ; assert: ( (cClass superclasses at: 1) inheritanceType = 'public').				self assert: ( (dClass superclasses at: 1) parentClass = cClass) ; assert: ( (dClass superclasses at: 1) inheritanceType = 'public').		self assert: ( (dClass superclasses at: 2) parentClass = aClass) ; assert: ( (dClass superclasses at: 2) inheritanceType = 'private').				self assert: ( (eClass superclasses at: 1) parentClass = aClass) ; assert: ( (eClass superclasses at: 1) inheritanceType = 'public').		self assert: ( (eClass superclasses at: 2) parentClass = cClass) ; assert: ( (eClass superclasses at: 2) inheritanceType = 'private').		self assert: ( (eClass superclasses at: 3) parentClass = dClass) ; assert: ( (eClass superclasses at: 3) inheritanceType = 'private').				self assert: ( (fClass superclasses at: 1) parentClass = eClass) ; assert: ( (cClass superclasses at: 1) inheritanceType = 'public').						! !!OOPObjectTest methodsFor: 'testing' stamp: 'yb 6/12/2018 17:31'!testSubclass_2	| oot |			oot := OOPObjectTest new.				self assert: (gClass superclasses size = 0).		self assert: (hClass superclasses size = 1).				self assert: ( (hClass superclasses at: 1) parentClass = gClass) ; assert: ( (hClass superclasses at: 1) inheritanceType = 'public').		! !