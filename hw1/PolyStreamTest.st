'From Squeak5.1 of 23 August 2016 [latest update: #16548] on 16 April 2018 at 8:41:16 am'!TestCase subclass: #PolyStreamTest	instanceVariableNames: 'p'	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Extensions'!!PolyStreamTest methodsFor: 'testing' stamp: 'dfdf 4/14/2018 16:44'!testAdd	| q |	p := PolyStream new.	"check exception"	[p add: 3] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p add: 4.3] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p add: $t] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p add: 'hello'] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	"0 add 0"	q := PolyStream new.	p add: q.	self assert: ((p block value: 2 value: Set new) = 0).	self assert: ((p block value: 2 value: (Set with:1)) = 0).		"0 add 2x^2+3"	p := PolyStream new.	q addCoef:2 withExp:2.	q addCoef:3 withExp:0.	p add: q.	self assert: ((p block value: 1 value: Set new) = 5).	self assert: ((p block value: 1 value: (Set with:0)) = 2).		"x^3+2x add 0"	p := PolyStream new.	q := PolyStream new.	p addCoef:1 withExp:3.	p addCoef:2 withExp:1.	self assert: ((p block value: 2 value: Set new) = 12).	self assert: ((p block value: 2 value: (Set with:1)) = 8).	self assert: ((p block value: 2 value: (Set with:1 with:3)) = 0).		"x^3+2x^2+3x+4 add x^4+2x^3+3x^2+4x"	p := PolyStream new.	q := PolyStream new.	p addCoef:1 withExp:3.	p addCoef:2 withExp:2.	p addCoef:3 withExp:1.	p addCoef:4 withExp:0.	q addCoef:1 withExp:4.	q addCoef:2 withExp:3.	q addCoef:3 withExp:2.	q addCoef:4 withExp:1.	p add: q.	self assert: ((p block value: 1 value: Set new) = 20).	self assert: ((p block value: 1 value: (Set with:0)) = 16).	self assert: ((p block value: 1 value: (Set with:1 with:0)) = 9).	self assert: ((p block value: 1 value: (Set with: 2 with:1 with:0)) = 4).	self assert: ((p block value: 1 value: (Set with: 3 with: 2 with:1 with:0)) = 1).	self assert: ((p block value: 1 value: (Set with: 4 with: 3 with: 2 with:1 with:0)) = 0).	! !!PolyStreamTest methodsFor: 'testing' stamp: 'dfdf 4/14/2018 16:07'!testAddCoefWithExps	p := PolyStream new.	"p=0"	self assert: ((p block value: 2 value: (Set new)) = 0).	self assert: ((p block value: 2 value: (Set with: 2 with: 3)) = 0).		"check excesption"	[p addCoef: 3 withExp: -2] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p addCoef: 2.5 withExp: 1] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p addCoef: 3 withExp: 1.5] on: Error do: [:e | self assert: (e messageText = 'invalid input')].		"p=2x"	p addCoef:2 withExp:1.	self assert: ((p block value: 3 value: (Set new)) = 6).	self assert: ((p block value: 3 value: (Set with: 2)) = 6).	self assert: ((p block value: 3 value: (Set with: 1)) = 0).	self assert: ((p block value: 3 value: (Set with: 1 with: 2)) = 0).		"p=x^4+2x^3+3x^2+4x+5"	p := PolyStream new.	p addCoef: 1 withExp: 4.	p addCoef: 2 withExp: 3.	p addCoef: 3 withExp: 2.	p addCoef: 4 withExp: 1.	p addCoef: 5 withExp: 0.	self assert: ((p block value: 1 value: (Set new)) = 15).	self assert: ((p block value: 1 value: (Set with: 5)) = 15).	self assert: ((p block value: 2 value: (Set with: Set new)) = 57).	self assert: ((p block value: 2 value: (Set with: Set with: 4)) = 41).	self assert: ((p block value: 2 value: (Set with: Set with: 3)) = 41).	self assert: ((p block value: 2 value: (Set with: Set with: 3 with: 4)) = 25).	self assert: ((p block value: 2 value: (Set with: Set with:3 with: 4  with: 0)) = 20).	self assert: ((p block value: 2 value: (Set with: Set with:0 with:1 with:2 with:3 with:4)) = 0).! !!PolyStreamTest methodsFor: 'testing' stamp: 'dfdf 4/15/2018 16:47'!testEval	| q |	p := PolyStream new.		"test exception"	[p eval: 3.6] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p eval: $d] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p eval: 'hallo'] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	self assert: ((p eval: 6) = 0).	self assert: (((p addCoef: 1 withExp: 1) eval: 0) = 0).	self assert: ((p eval: 3) = 3).		p := PolyStream new.	p addCoef: 3 withExp: 0.	self assert: ((p eval: 8) = 3).		p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 2 withExp: 1.	p addCoef: 3 withExp: 0.	self assert: ((p eval: 1) = 6).		p := PolyStream new.	q := PolyStream new.	p addCoef: 1 withExp: 2.	q addCoef: 3 withExp: 1.	self assert: (((p add: q) eval: 2) = 10).		p := PolyStream new.	q := PolyStream new.	p addCoef: 1 withExp: 2.	q addCoef: -3 withExp: 1.	self assert: (((p add: q) eval: 2) = -2).		p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 1 withExp: 1.	self assert: (((p filter: (Set with: 2)) eval: 4) = 4).		p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 1 withExp: 1.	self assert: ((((p filter: (Set with: 2)) filter: (Set with: 1)) eval: 100) = 0).		p := PolyStream new.	p addCoef: 1 withExp: 2.	self assert: (((p multiplyBy: 3) eval: 5) = 75).		p := PolyStream new.	p addCoef: 1 withExp: 2.	self assert: (((p substitute: 2) eval: 3) = 36).		! !!PolyStreamTest methodsFor: 'testing' stamp: 'dfdf 4/16/2018 08:14'!testFilter		| tmp |	p := PolyStream new.		"0 filter {2}"	p filter: (Set with: 2).	self assert: ((p block value: 2 value: (Set new)) = 0).	self assert: ((p block value: 2 value: (Set with: 2)) = 0).		"x^2+2x+3 filter {4}"	p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 2 withExp: 1.	p addCoef: 3 withExp: 0.	p filter: (Set with: 4).	self assert: ((p block value: 2 value: (Set new)) = 11).	self assert: ((p block value: 2 value: (Set with: 3)) = 11).	self assert: ((p block value: 2 value: (Set with: 2)) = 7).		"x^2+2x+3 filter {0,1,2}"	p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 2 withExp: 1.	p addCoef: 3 withExp: 0.	p filter: (Set with: 0 with: 1 with: 2).	self assert: ((p block value: 2 value: (Set new)) = 0).	self assert: ((p block value: 2 value: (Set with: 1)) = 0).		"x^2+2x+3 filter {2}"	p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 2 withExp: 1.	p addCoef: 3 withExp: 0.	p filter: (Set with: 2).	self assert: ((p block value: 2 value: (Set new)) = 7).	self assert: ((p block value: 2 value: (Set with: 1)) = 3).		"x^2+2x+3 filter {2} filter {1}"	p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 2 withExp: 1.	p addCoef: 3 withExp: 0.	p filter: (Set with: 2) ; filter: (Set with: 1).	self assert: ((p block value: 2 value: (Set new)) = 3).	self assert: ((p block value: 2 value: (Set with: 0)) = 0).		"x^2+2x+3 filter {2} add 2x^2"	p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 2 withExp: 1.	p addCoef: 3 withExp: 0.	p filter: (Set with: 2) ; addCoef: 2 withExp: 2.	self assert: ((p block value: 2 value: (Set new)) = 15).	self assert: ((p block value: 2 value: (Set with: 2)) = 7).		"make sure future change on the filter set doesn't affect the PolyStream"	p := PolyStream new.	p addCoef: 1 withExp: 2.	p addCoef: 2 withExp: 1.	p addCoef: 3 withExp: 0.	tmp := Set with: 2.	p filter: tmp.	tmp remove: 2 ; add: 1.	self assert: ((p block value: 2 value: (Set new)) = 7).	self assert: ((p block value: 2 value: (Set with: 1)) = 3).		! !!PolyStreamTest methodsFor: 'testing' stamp: 'dfdf 4/14/2018 20:01'!testIntersectionWith	| q b |	"check exception"	p:= PolyStream new.	q := PolyStream new.	[p intersectionWith: q withinRange: 3.7] 		on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p intersectionWith: 5 withinRange: 5] 		on: Error do: [:e | self assert: (e messageText = 'invalid input')].		"x inter with x+3 in [-1,1]"	p addCoef: 1 withExp: 1.	p addCoef: 1 withExp: 1.	q addCoef: 3 withExp: 0.	b := p intersectionWith: q withinRange: 1.	self assert: (b value = 'wait for it...').	self assert: (b value = 'wait for it...').	self assert: (b value = 'wait for it...').	[b value] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	"x inter with 2x in [-1,1]"	p:= PolyStream new.	q := PolyStream new.	p addCoef: 1 withExp: 1.	q addCoef: 2 withExp: 1.	b := p intersectionWith: q withinRange: 1.	self assert: (b value = 0).	self assert: (b value = 'wait for it...').	self assert: (b value = 'wait for it...').	[b value] on: Error do: [:e | self assert: (e messageText = 'invalid input')].		"-x^2+6 inter with -x in [-1,1]"	p := PolyStream new.	q := PolyStream new.	p addCoef: (-1) withExp: 2.	p addCoef: 6 withExp: 0.	q addCoef: (-1) withExp: 1.	b := p intersectionWith: q withinRange: 3.	self assert: (b value = 'wait for it...').	self assert: (b value = 'wait for it...').	self assert: (b value = 'wait for it...').	self assert: (b value = 'wait for it...').	self assert: (b value = (-2)).	self assert: (b value = 3).	self assert: (b value = 'wait for it...').	[b value] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	! !!PolyStreamTest methodsFor: 'testing' stamp: 'dfdf 4/14/2018 17:17'!testMultiplyBy	p := PolyStream new.		"check exception"	[p multiplyBy: 3.5] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p multiplyBy: $c] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p multiplyBy: 'hello'] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	"0 mul 0"	p multiplyBy: 0.	self assert: ((p block value: 2 value: Set new) = 0).	self assert: ((p block value: 2 value: (Set with: 1)) = 0).		"0 mul 6"	p := PolyStream new.	p multiplyBy: 0.	self assert: ((p block value: 2 value: Set new) = 0).	self assert: ((p block value: 2 value: (Set with: 1)) = 0).		"2x^3+2x mul 0"	p := PolyStream new.	p addCoef: 2 withExp: 3.	p addCoef: 2 withExp: 1.	p multiplyBy: 0.	self assert: ((p block value: 2 value: Set new) = 0).	self assert: ((p block value: 2 value: (Set with: 4)) = 0).	self assert: ((p block value: 2 value: (Set with: 3)) = 0).		"2x^3+2x mul 3"	p := PolyStream new.	p addCoef: 2 withExp: 3.	p addCoef: 2 withExp: 1.	p multiplyBy: 3.	self assert: ((p block value: 2 value: Set new) = 60).	self assert: ((p block value: 2 value: (Set with: 4)) = 60).	self assert: ((p block value: 2 value: (Set with: 3)) = 12).	self assert: ((p block value: 2 value: (Set with: 3 with: 1 with: 0)) = 0).	self assert: ((p block value: 2 value: (Set with: 3 with: 1)) = 0).		"2x^3+2x mul 3 mul 2"	p := PolyStream new.	p addCoef: 2 withExp: 3.	p addCoef: 2 withExp: 1.	p multiplyBy: 3.	p multiplyBy: 2.	self assert: ((p block value: 2 value: Set new) = 120).	self assert: ((p block value: 2 value: (Set with: 4)) = 120).	self assert: ((p block value: 2 value: (Set with: 3)) = 24).	self assert: ((p block value: 2 value: (Set with: 3 with: 1 with: 0)) = 0).	self assert: ((p block value: 2 value: (Set with: 3 with: 1)) = 0).! !!PolyStreamTest methodsFor: 'testing' stamp: 'dfdf 4/14/2018 16:58'!testSubstitute	p := PolyStream new.		"check exception"	[p substitute: 3.5] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p substitute: 0] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p substitute: $u] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p substitute: 'hello'] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	"0 sub 5"	p substitute: 5.	self assert: ((p block value: 2 value: (Set new)) = 0).	self assert: ((p block value: 2 value: (Set with: 1)) = 0).		"6 sub 4"	p := PolyStream new.	p addCoef: 6 withExp: 0.	p substitute: 4.	self assert: ((p block value: 2 value: (Set new)) = 6).	self assert: ((p block value: 2 value: (Set with: 1)) = 6).		"x sub 3 sub 4"	p := PolyStream new.	p addCoef: 1 withExp: 1.	p substitute: 3.	p substitute: 4.	self assert: ((p block value: 2 value: (Set new)) = 24).	self assert: ((p block value: 2 value: (Set with: 1)) = 0).		"6x^3+2x+8 sub 2"	p := PolyStream new.	p addCoef: 6 withExp: 3.	p addCoef: 2 withExp: 1.	p addCoef: 8 withExp: 0.	p substitute: 2.	self assert: ((p block value: 2 value: (Set new)) = 400).	self assert: ((p block value: 2 value: (Set with: 4)) = 400).	self assert: ((p block value: 2 value: (Set with: 3)) = 16).	self assert: ((p block value: 2 value: (Set with: 0)) = 392).! !