'From Squeak5.1 of 23 August 2016 [latest update: #16548] on 12 April 2018 at 5:10:50 pm'!TestCase subclass: #PolynomTest	instanceVariableNames: 'p'	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Extensions'!!PolynomTest methodsFor: 'testing' stamp: 'yb 4/12/2018 16:36'!testAddMonoms	| m |	p := Polynom new.	"check exception"	[p addMonom: 3] on: Error do:  [:e | self assert: (e messageText = 'invalid input')].		"do nothing if monom=0 is added"	p addMonom: (Monom new).	self assert: (p asDictionary size = 0).		"add a correct monom"	m := Monom new.	m coef: 3 ; exp: 2.	p addMonom: m.	self assert: (p asDictionary size = 1).	self assert: ((p asDictionary at: 2) = 3).		"check that polynom is the owner of the data"	m coef: 7.	self assert: ((p asDictionary at: 2) = 3).		"add other monoms"	p addMonom: m.	self assert: (p asDictionary size = 1).	self assert: ((p asDictionary at: 2) = 10).		m exp: 5.	p addMonom: m.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 2) = 10).	self assert: ((p asDictionary at: 5) = 7).		! !!PolynomTest methodsFor: 'testing' stamp: 'yb 4/12/2018 15:48'!testInitialize	p := Polynom new.	self assert: (p asDictionary size = 0).! !!PolynomTest methodsFor: 'testing' stamp: 'yb 4/12/2018 17:10'!testMultiplyByMonom	| m0 m1 m2 constMon coef1Mon regularMon |	p := Polynom new.	m0 := Monom new.	m1 := Monom new.	m2 := Monom new.	constMon := Monom new.	coef1Mon := Monom new.	regularMon := Monom new.	m0 coef: 0.	m1 coef: 3 ; exp: 2.	m2 coef: 5 ; exp: 6.	constMon coef: 4 ; exp: 0.	coef1Mon coef:1 ; exp: 3.	regularMon coef: 2 ; exp: 2.	"check exception"	[p addMonom: 3] on: Error do:  [:e | self assert: (e messageText = 'invalid input')].	"multiply any monom by p=0 should leave p=0"	p multipleByMonom: m1.	self assert: (p asDictionary size = 0).		"multiple a non-zero polynom by monom=0 should leave p=0"	p addMonom: m1.	p addMonom: m2.	p multipleByMonom: m0.	self assert: (p asDictionary size = 0).		"test some monoms"	p addMonom: m1.	p addMonom: m2.	"p = 5x^6 + 3x^2"	p multipleByMonom: constMon.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 6) = 20).	self assert: ((p asDictionary at: 2) = 12).	"p = 20x^6 + 12x^2"	p multipleByMonom: coef1Mon.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 9) = 20).	self assert: ((p asDictionary at: 5) = 12).	"p = 20x^9 + 12x^5"	p multipleByMonom: regularMon.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 11) = 40).	self assert: ((p asDictionary at: 7) = 24).	"p = 40x^11 + 24x^7"		"test that future change of regular monom don't affect polynom"	regularMon coef: 1 ; exp: 1.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 11) = 40).	self assert: ((p asDictionary at: 7) = 24).	"p = 40x^11 + 24x^7"	! !