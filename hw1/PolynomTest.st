'From Squeak5.1 of 23 August 2016 [latest update: #16548] on 13 April 2018 at 10:35:22 am'!TestCase subclass: #PolynomTest	instanceVariableNames: 'p'	classVariableNames: ''	poolDictionaries: ''	category: 'SUnit-Extensions'!!PolynomTest methodsFor: 'testing' stamp: 'yb 4/13/2018 10:35'!testAdd	| q m res |	p := Polynom new.	q := Polynom new.	m := Monom new.		"check that exception thrown"	[p add: 3] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	"p=0 , q=0 => p+q=0"	res := p add: q.	self assert: (res asDictionary size = 0).		"p=0 , q=x^2+4x+2 => p+q=x^2+4x+2"	m coef: 1 ; exp: 2.	q addMonom: m.	m coef: 4 ; exp: 1.	q addMonom: m.	m coef: 2 ; exp: 0.	q addMonom: m.	res := p add: q.	self assert: (res asDictionary size = 3).	self assert: ((res asDictionary at: 2) = 1).	self assert: ((res asDictionary at: 1) = 4).	self assert: ((res asDictionary at: 0) = 2).		"p=x^3+x , q=0 => p+q=x^3+x"	p := Polynom new.	q := Polynom new.	m coef: 1 ; exp: 3.	p addMonom: m.	m coef: 1 ; exp: 1.	p addMonom: m.	res := p add: q.	self assert: (res asDictionary size = 2).	self assert: ((res asDictionary at: 3) = 1).	self assert: ((res asDictionary at: 1) = 1).		"p=x^3+2x+5 , q=x^4+3x^2 => p+q=x^4+x^3+3x^2+2x+5"	p := Polynom new.	q := Polynom new.	m coef: 1 ; exp: 3.	p addMonom: m.	m coef: 2 ; exp: 1.	p addMonom: m.	m coef: 5 ; exp: 0.	p addMonom: m.	m coef: 1 ; exp: 4.	q addMonom: m.	m coef: 3 ; exp: 2.	q addMonom: m.	res := p add: q.	self assert: (res asDictionary size = 5).	self assert: ((res asDictionary at: 4) = 1).	self assert: ((res asDictionary at: 3) = 1).	self assert: ((res asDictionary at: 2) = 3).	self assert: ((res asDictionary at: 1) = 2).	self assert: ((res asDictionary at: 0) = 5).		"p=x^2+2 , q=2x^2+1 => p+q=3x^2+3"	p := Polynom new.	q := Polynom new.	m coef: 1 ; exp: 2.	p addMonom: m.	m coef: 2 ; exp: 0.	p addMonom: m.	m coef: 2 ; exp: 2.	q addMonom: m.	m coef: 1 ; exp: 0.	q addMonom: m.	res := p add: q.	self assert: (res asDictionary size = 2).	self assert: ((res asDictionary at: 2) = 3).	self assert: ((res asDictionary at: 0) = 3).	"p=5x^3+2x^2+6 , q=x^3+x^2+x+1 => p+q=6x^3+3x^2+x+7"	p := Polynom new.	q := Polynom new.	m coef: 5 ; exp: 3.	p addMonom: m.	m coef: 2 ; exp: 2.	p addMonom: m.	m coef: 6 ; exp: 0.	p addMonom: m.	m coef: 1 ; exp: 3.	q addMonom: m.	m coef: 1 ; exp: 2.	q addMonom: m.	m coef: 1 ; exp: 1.	q addMonom: m.	m coef: 1 ; exp: 0.	q addMonom: m.	res := p add: q.	self assert: (res asDictionary size = 4).	self assert: ((res asDictionary at: 3) = 6).	self assert: ((res asDictionary at: 2) = 3).	self assert: ((res asDictionary at: 1) = 1).	self assert: ((res asDictionary at: 0) = 7).		"check that p,q hasn't changed"	self assert: (p asDictionary size = 3).	self assert: ((p asDictionary at: 3) = 5).	self assert: ((p asDictionary at: 2) = 2).	self assert: ((p asDictionary at: 0) = 6).	self assert: (q asDictionary size = 4).	self assert: ((q asDictionary at: 3) = 1).	self assert: ((q asDictionary at: 2) = 1).	self assert: ((q asDictionary at: 1) = 1).	self assert: ((q asDictionary at: 0) = 1).		"change on q doesn't affect res"	q := Polynom new.	self assert: (res asDictionary size = 4).	self assert: ((res asDictionary at: 3) = 6).	self assert: ((res asDictionary at: 2) = 3).	self assert: ((res asDictionary at: 1) = 1).	self assert: ((res asDictionary at: 0) = 7).! !!PolynomTest methodsFor: 'testing' stamp: 'yb 4/12/2018 16:36'!testAddMonoms	| m |	p := Polynom new.	"check exception"	[p addMonom: 3] on: Error do:  [:e | self assert: (e messageText = 'invalid input')].		"do nothing if monom=0 is added"	p addMonom: (Monom new).	self assert: (p asDictionary size = 0).		"add a correct monom"	m := Monom new.	m coef: 3 ; exp: 2.	p addMonom: m.	self assert: (p asDictionary size = 1).	self assert: ((p asDictionary at: 2) = 3).		"check that polynom is the owner of the data"	m coef: 7.	self assert: ((p asDictionary at: 2) = 3).		"add other monoms"	p addMonom: m.	self assert: (p asDictionary size = 1).	self assert: ((p asDictionary at: 2) = 10).		m exp: 5.	p addMonom: m.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 2) = 10).	self assert: ((p asDictionary at: 5) = 7).		! !!PolynomTest methodsFor: 'testing' stamp: 'yb 4/13/2018 09:20'!testDerivative	| m q |	p := Polynom new.	m := Monom new.		"derivative of p=0 => p'=0"	q := p derivative.	self assert: (q asDictionary size = 0).		"derivative of p=const => p'=0"	m coef:6 ; exp: 0.	p addMonom: m.	q := p derivative.	self assert: (q asDictionary size = 0).		"derivative of p=x^2 => p'=2x"	p := Polynom new.	m coef:1 ; exp: 2.	p addMonom: m.	q := p derivative.	self assert: (q asDictionary size = 1).	self assert: ((q asDictionary at: 1) = 2).		"derivative of p=3x^3+6x+2 => p'=9x^2+6"	p := Polynom new.	m coef:3 ; exp: 3.	p addMonom: m.	m coef:6 ; exp: 1.	p addMonom: m.	m coef:2 ; exp: 0.	p addMonom: m.	q := p derivative.	self assert: (q asDictionary size = 2).	self assert: ((q asDictionary at: 2) = 9).	self assert: ((q asDictionary at: 0) = 6).		"check that p hasn't change"	self assert: (p asDictionary size = 3).	self assert: ((p asDictionary at: 3) = 3).	self assert: ((p asDictionary at: 1) = 6).	self assert: ((p asDictionary at: 0) = 2).	! !!PolynomTest methodsFor: 'testing' stamp: 'yb 4/13/2018 09:52'!testEval	| m |	p := Polynom new.	m := Monom new.		"check exception is thrown"	[p eval: 3.6] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p eval: $k] on: Error do: [:e | self assert: (e messageText = 'invalid input')].	[p eval: 'hello'] on: Error do: [:e | self assert: (e messageText = 'invalid input')].		"p=0 => p(3)=0"	self assert: ((p eval: 3) = 0).		"p=c =>p(4)=c"	m coef: 6 ; exp: 0.	p addMonom: m.	self assert: ((p eval: 4) = 6).		"p=x =>p(2)=2"	p := Polynom new.	m coef: 1 ; exp: 1.	p addMonom: m.	self assert: ((p eval: 2) = 2).		"p=6x^3+4x^2+2x+3 =>p(2)=71"	p := Polynom new.	m coef: 6 ; exp: 3.	p addMonom: m.	m coef: 4 ; exp: 2.	p addMonom: m.	m coef: 2 ; exp: 1.	p addMonom: m.	m coef: 3 ; exp: 0.	p addMonom: m.	self assert: ((p eval: 2) = 71).		"check that the polynom hasn't changed"	self assert: (p asDictionary size = 4).	self assert: ((p asDictionary at: 3) = 6).	self assert: ((p asDictionary at: 2) = 4).	self assert: ((p asDictionary at: 1) = 2).	self assert: ((p asDictionary at: 0) = 3).	! !!PolynomTest methodsFor: 'testing' stamp: 'yb 4/12/2018 15:48'!testInitialize	p := Polynom new.	self assert: (p asDictionary size = 0).! !!PolynomTest methodsFor: 'testing' stamp: 'yb 4/12/2018 17:10'!testMultiplyByMonom	| m0 m1 m2 constMon coef1Mon regularMon |	p := Polynom new.	m0 := Monom new.	m1 := Monom new.	m2 := Monom new.	constMon := Monom new.	coef1Mon := Monom new.	regularMon := Monom new.	m0 coef: 0.	m1 coef: 3 ; exp: 2.	m2 coef: 5 ; exp: 6.	constMon coef: 4 ; exp: 0.	coef1Mon coef:1 ; exp: 3.	regularMon coef: 2 ; exp: 2.	"check exception"	[p addMonom: 3] on: Error do:  [:e | self assert: (e messageText = 'invalid input')].	"multiply any monom by p=0 should leave p=0"	p multipleByMonom: m1.	self assert: (p asDictionary size = 0).		"multiple a non-zero polynom by monom=0 should leave p=0"	p addMonom: m1.	p addMonom: m2.	p multipleByMonom: m0.	self assert: (p asDictionary size = 0).		"test some monoms"	p addMonom: m1.	p addMonom: m2.	"p = 5x^6 + 3x^2"	p multipleByMonom: constMon.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 6) = 20).	self assert: ((p asDictionary at: 2) = 12).	"p = 20x^6 + 12x^2"	p multipleByMonom: coef1Mon.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 9) = 20).	self assert: ((p asDictionary at: 5) = 12).	"p = 20x^9 + 12x^5"	p multipleByMonom: regularMon.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 11) = 40).	self assert: ((p asDictionary at: 7) = 24).	"p = 40x^11 + 24x^7"		"test that future change of regular monom don't affect polynom"	regularMon coef: 1 ; exp: 1.	self assert: (p asDictionary size = 2).	self assert: ((p asDictionary at: 11) = 40).	self assert: ((p asDictionary at: 7) = 24).	"p = 40x^11 + 24x^7"	! !